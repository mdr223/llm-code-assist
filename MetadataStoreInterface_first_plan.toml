approved = true

[[method]]
class_name = "MetadataStore"
class_interface = "MetadataStoreInterface"
method_name = "__init__"
is_auxiliary = false
description = "Initializes the metadata store"
steps = """
1. Initialize the global lock
2. Open the file in read-write mode
3. Check if the file is initialized (size >= PAGE_SIZE and first 8 bytes non-zero)
4. If not initialized, write zeros to fill the page
5. Read the entire page from disk
6. Parse the number of items and key-value pairs
7. Populate the in-memory map and calculate free space
"""

[[method]]
class_name = "MetadataStore"
class_interface = "MetadataStoreInterface"
method_name = "_write_page"
is_auxiliary = true
description = "Writes the entire page to disk"
steps = """
1. Create a byte buffer of PAGE_SIZE
2. Write the number of items to the buffer
3. Iterate through the in-memory map, writing each key-value pair to the buffer
4. Pad the remaining space with zeros
5. Write the entire buffer to disk at offset 0
6. Flush to ensure durability
"""

[[method]]
class_name = "MetadataStore"
class_interface = "MetadataStoreInterface"
method_name = "get"
is_auxiliary = false
description = "Retrieves a value for a given key"
steps = """
1. Acquire the global lock
2. Retrieve the value from the in-memory map
3. Release the global lock
4. Return the value (or None if not found)
"""

[[method]]
class_name = "MetadataStore"
class_interface = "MetadataStoreInterface"
method_name = "set"
is_auxiliary = false
description = "Sets a value for a given key"
steps = """
1. Acquire the global lock
2. Check if there's enough free space
3. If not enough space, release lock and raise an exception
4. Update the in-memory map
5. Call the auxiliary write function
6. Update the free space
7. Release the global lock
"""

[[method]]
class_name = "MetadataStore"
class_interface = "MetadataStoreInterface"
method_name = "delete"
is_auxiliary = false
description = "Deletes a key-value pair"
steps = """
1. Acquire the global lock
2. Remove the key-value pair from the in-memory map
3. Call the auxiliary write function
4. Update the free space
5. Release the global lock
"""

[[method]]
class_name = "MetadataStore"
class_interface = "MetadataStoreInterface"
method_name = "close"
is_auxiliary = false
description = "Closes the metadata store"
steps = """
1. Acquire the global lock
2. Flush any pending writes
3. Close the file
4. Release the global lock
"""

[[method]]
class_name = "MetadataStore"
class_interface = "MetadataStoreInterface"
method_name = "free_size"
is_auxiliary = false
description = "Returns the free storage size"
steps = """
1. Acquire the global lock
2. Return the current free size
3. Release the global lock
"""
